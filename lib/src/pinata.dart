library pinata;

import 'dart:convert';
import 'dart:core';
import 'dart:io';
import 'dart:typed_data';

import 'package:http/http.dart';
import 'package:qp_xt/qp_xt.dart';

part 'pinata_api.dart';
part 'pinata_key.dart';
part 'pinata_log.dart';
part 'utils/access.dart';
part 'utils/exception.dart';
part 'utils/hash.dart';
part 'utils/job.dart';
part 'utils/link.dart';
part 'utils/pin.dart';
part 'utils/query.dart';
part 'utils/schema.dart';

const _api = 'pinata_api_key';
const _secret = 'pinata_secret_api_key';

/// ## Pinata
/// Extends [_PinataAPI] to expose it's interface
/// that can be used to communicate with IPFS via
/// Pinata online Gateway.
/// <br/><br/>
///
/// IPFS means Interplanetary File System. It's a
/// decentralised storage network for files.
/// <br/><br/>
///
/// There are 3 major constructors to access Pinata
/// API Interface:
///   - [Pinata.login]
///   - [Pinata.viaPair]
///   - [Pinata.viaJWT]
/// <br/><br/>
///
/// [Pinata.test] - Pinata test interface can be used
/// to access Pinata test IPFS Network provided by Rey.
/// Works with full fledged editor access confined to
/// Rey local space.
/// <br/><br/>
///
/// ```dart
/// var pinata = Pinata.viaPair(
///   name: 'Rey Pinata',
///   apiKey: 'API KEY',
///   secret: 'API SECRET',
/// );
/// ```
class Pinata extends _PinataAPI {
  //...Utility
  static String? _gatewayID;

  /// Set Pinata dedicated gateway iD to target files
  /// via your own custom dedicated gateway for higher
  /// speed and usage experience.
  /// <br/><br/>
  /// ```dart
  /// final pinata = Pinata.gateway = 'GATEWAY_ID';
  /// ```
  static set gateway(String iD) => _gatewayID = iD;

  //...Fields
  /// Generate Pinata from [access] hash. Access hash
  /// is a map data that contains either 'Authority'
  /// : 'Bearer JWT' or 'pinata_api_key' : 'API KEY'
  /// and 'pinata_api_secret_key' : 'API SECRET KEY'
  /// pairs.
  /// <br/><br/>
  /// ```dart
  /// final pinata = Pinata.access('
  ///   access: {
  ///     ACCESS HASH
  ///   },
  /// );
  /// print(pinata); // Instance of Pinata
  /// ```
  Pinata.login({
    super.name = 'One Time Login',
    required super.login,
  }) : super._();

  /// Create Pinata from the long hash [jWT]. JWT is
  /// a lengthy token that was generated by pinata
  /// from api key and api secret key using encoding
  /// inferred by Pinata Gateway.
  /// <br/><br/>
  /// ```dart
  /// final pinata = Pinata.viaJWT(
  ///   jWT: r'EUj...'
  /// );
  /// print(pinata); // Instance of Pinata
  /// ```
  Pinata.viaJWT({
    super.name = 'One Time Login',
    required String jWT,
    String? apiKey,
    String? secret,
  }) : super._(
          login: {
            "Authorization": "Bearer $jWT",
          },
        );

  /// Create Pinata from [apiKey] and api [secret]
  /// key. Api key is the iD while Api secret key
  /// is on the other hand the password.
  /// <br/><br/>
  /// ```dart
  /// final pinata = Pinata.viaPair(
  ///   apiKey: r'EUj...',
  ///   secret: r'4050kek...',
  /// );
  /// print(pinata); // Instance of Pinata
  /// ```
  Pinata.viaPair({
    super.name = 'One Time Login',
    required String apiKey,
    required String secret,
    String? jWT,
  }) : super._(
          login: {
            'pinata_api_key': apiKey,
            'pinata_secret_api_key': secret,
          },
        );

  Pinata._fromJson(data)
      : assert(data is Map),
        super._(
          name: data['name'] ?? '',
          login: _resolve(data),
          //...
        );

  static Map<String, String> _resolve(Map data) {
    if (data['login'] != null) {
      return Map<String, String>.from(data['login']);
    }
    return data.containsKey('JWT')
        ? {'Authorization': "Bearer ${data['JWT']}"}
        : {_api: data[_api]!, _secret: data[_secret]!};
  }

  /// Parse Pinata key data from string. Work's entirely
  /// seamlessly and without network. This is the undo
  /// call for [PinataKey.toString].
  /// <br/><br/>
  ///
  /// ```dart
  /// var key = Pinata.parse('SOURCE');
  /// ```
  factory Pinata.parse(String source) {
    source = source.replaceAll(RegExp(r'\s+'), '');
    final validKey = RegExp(r'^PinataAPI\((.+)\)$');
    final match = validKey.matchAsPrefix(source);
    final data = json.decode(match?.group(1) ?? '{}');
    return Pinata._fromJson(data);
  }

  //...Utility
  /// ## Test Pinata IPFS on Rey
  /// Read and Write docs to Rey Test Gateway
  /// If this key stops working in the future,
  /// update your version of [pinata] package.
  /// <br/><br/>
  ///
  /// ```dart
  /// final pinata = Pinata.test;
  /// print(pinata); // Instance of Pinata
  /// ```
  static final test = Pinata.viaPair(
    name: 'Test Pinata IPFS from Rey',
    apiKey: r'ee94a0d47f29aee95b3a',
    secret: r'728667ffdd7cef7818cc1e1704b824c'
        r'a43c80eaf2af7c5bf534d3fffb39bd68a',
  );
}
